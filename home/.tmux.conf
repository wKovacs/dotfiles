# =======================================================================
# TMUX BASE CONFIGURATION
# =======================================================================
set-option -g status on
set-option -g status-interval 2
set-option -g status-justify "centre"

set -s set-clipboard external

# Mouse Toggle: Ctrl-b m
set -g mouse on
bind-key -T prefix m set -g mouse\; display 'Mouse: #{?mouse,ON,OFF}'
# Reload config: Ctrl-b M-r (Alt-r)
bind-key -T prefix M-r source-file ~/.tmux.conf

# Titlestuff
set-option -g set-titles on
set-option -g set-titles-string "#S:#P #W"
set-option -g allow-rename on


# =======================================================================
# PLUGINS & INITIALIZATION
# =======================================================================

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'erikw/tmux-powerline'
set -g @plugin 'tmux-plugins/tmux-yank'

run '~/.tmux/plugins/tpm/tpm'


# =======================================================================
# CUSTOM KEYBINDINGS & OVERWRITES
# =======================================================================

<<<<<<< HEAD
## ðŸ§  NEOVIM MOUSE FIX: Toggle mouse control between tmux and the application (Vim/Neovim)
# New binding: Ctrl-b t (for 'toggle'). Use this to fix scrolling inside Neovim.
bind-key -T prefix t run "tmux show-options -w | grep -q 'mouse on' && tmux set-window-option -g mouse off || tmux set-window-option -g mouse on"

# --- MOUSE COPY/YANK OVERWRITE (Uses xclip for Wayland/Xwayland) ---
=======
# --- CONDITIONAL MOUSE BEHAVIOR (nvim vs shell) ---
>>>>>>> revert

# Mouse drag start: if in nvim, pass through; else enter copy-mode
bind-key -n MouseDrag1Pane if-shell \
  "tmux display-message -p '#{pane_current_command}' | grep -iqE 'n?vim'" \
  "send-keys -M" \
  "copy-mode -M"

# Mouse drag end: if in nvim, pass through; else yank to clipboard
bind-key -T copy-mode MouseDragEnd1Pane if-shell \
  "tmux display-message -p '#{pane_current_command}' | grep -iqE 'n?vim'" \
  "send-keys -M" \
  "send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'"

bind-key -T copy-mode-vi MouseDragEnd1Pane if-shell \
  "tmux display-message -p '#{pane_current_command}' | grep -iqE 'n?vim'" \
  "send-keys -M" \
  "send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'"

# Keyboard yank with 'y' (outside nvim)
unbind-key -T copy-mode y
unbind-key -T copy-mode-vi y
bind-key -T copy-mode y send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'

# Enter copy-mode with Space (but pass through if in nvim)
bind-key -T prefix Space if-shell "tmux display-message -p '#{pane_current_command}' | grep -iqE '(n?vim|vi)'" \
 Â  Â "send-keys Space" \
 Â  Â "copy-mode -e"
bind-key -T copy-mode Space if -F "#{selection_present}" { send -X clear-selection } { send -X begin-selection }
bind-key -T copy-mode Enter send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'


# --- PASTE WITH RIGHT CLICK ---
unbind-key -n MouseDown3Pane
bind-key -T root MouseUp3Pane run "wl-paste --no-newline | tmux load-buffer - && tmux paste-buffer -p"

# NOTE: The menu binding for C-MouseDown3Pane is kept as you defined it.
bind-key -T root C-MouseDown3Pane \
Â  Â  if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" \
Â  Â  { select-pane -t = ; send-keys -M } \
Â  Â  { display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M \
Â  Â  Â  Â  "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } \
Â  Â  Â  Â  "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } \
Â  Â  Â  Â  '' \
Â  Â  Â  Â  "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } \
Â  Â  Â  Â  "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } \
Â  Â  Â  Â  "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer "#{q:mouse_word}" } \
Â  Â  Â  Â  "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer "#{q:mouse_line}" } \
Â  Â  Â  Â  '' \
Â  Â  Â  Â  "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } \
Â  Â  Â  Â  "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer "#{q:mouse_hyperlink}" } \
Â  Â  Â  Â  '' \
Â  Â  Â  Â  "Horizontal Split" h { split-window -h } \
Â  Â  Â  Â  "Vertical Split" v { split-window -v } \
Â  Â  Â  Â  '' \
Â  Â  Â  Â  "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } \
Â  Â  Â  Â  "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } \
Â  Â  Â  Â  "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } \
Â  Â  Â  Â  '' \
Â  Â  Â  Â  Kill X { kill-pane } \
Â  Â  Â  Â  Respawn R { respawn-pane -k } \
Â  Â  Â  Â  "#{?pane_marked,Unmark,Mark}" m { select-pane -m } \
Â  Â  Â  Â  "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z } \
Â  Â  }
