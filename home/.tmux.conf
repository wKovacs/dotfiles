# =======================================================================
# TMUX BASE CONFIGURATION
# =======================================================================
set-option -g status on
set-option -g status-interval 2
set-option -g status-justify "centre"

set -s set-clipboard external

# Mouse Toggle: Ctrl-b m
set -g mouse on
bind-key -T prefix m set -g mouse\; display 'Mouse: #{?mouse,ON,OFF}'
# Reload config: Ctrl-b M-r (Alt-r)
bind-key -T prefix M-r source-file ~/.tmux.conf

# Titlestuff
set-option -g set-titles on
set-option -g set-titles-string "#S:#P #W"
set-option -g allow-rename on


# =======================================================================
# PLUGINS & INITIALIZATION
# =======================================================================

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'erikw/tmux-powerline'
set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line before custom keybinds!)
run '~/.tmux/plugins/tpm/tpm'


# =======================================================================
# CUSTOM KEYBINDINGS & OVERWRITES
# (These must come AFTER the 'run' command to ensure they overwrite plugins)
# =======================================================================

# --- MOUSE COPY/YANK OVERWRITE (Uses xclip for Wayland/Xwayland) ---

# tmux-yank sets bindings in copy-mode-vi, so we must unbind/rebind both tables.

# 1. Unbind conflicting keys in both tables
unbind-key -T copy-mode MouseDragEnd1Pane
unbind-key -T copy-mode y
unbind-key -T copy-mode-vi MouseDragEnd1Pane
unbind-key -T copy-mode-vi y

# 2. Set the WORKING xclip command for both tables
# Mouse - select and yank
bind-key -n MouseDrag1Pane copy-mode -M
bind-key -T copy-mode MouseDrag1Pane send -X begin-selection

bind-key -T copy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'
#bind-key -T copy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel 'wl-copy' # Wayland version (currently buggy "[Desktop Entry]" blocks yanking if 1st line)

# Keyboard - yank with 'y' key
# Note: your original config used T prefix Space to enter copy mode
bind-key -T copy-mode y send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'
#bind-key -T copy-mode y send -X copy-pipe-and-cancel 'wl-copy' # Wayland version (currently buggy "[Desktop Entry]" blocks yanking if 1st line)

# --- KEYBOARD COPY/PASTE SETUP ---

# Keyboard - enter copy-mode, start selection, yank
#bind-key -T prefix Space copy-mode -e # -e added to force non-blocked selecting
# NEW CONDITIONAL BINDING for Ctrl+B, Space
bind-key -T prefix Space if-shell "tmux display-message -p '#{pane_current_command}' | grep -iqE '(n?vim|vi)'" \
    "send-keys Space" \
    "copy-mode -e"
bind-key -T copy-mode Space if -F "#{selection_present}" { send -X clear-selection } { send -X begin-selection }
bind-key -T copy-mode Enter send -X copy-pipe-and-cancel 'xclip -selection clipboard -i'


# --- PASTE THE CRAP (Right Click/MouseUp) ---

# Remove default right-click binding to use it for paste
unbind-key -n MouseDown3Pane

# Bind paste to right click (Using your original wl-paste for consistency)
bind-key -T root MouseUp3Pane run "wl-paste --no-newline | tmux load-buffer - && tmux paste-buffer -p"

# NOTE: The menu binding for C-MouseDown3Pane is kept as you defined it, but simplified here for readability.
bind-key -T root C-MouseDown3Pane \
    if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" \
    { select-pane -t = ; send-keys -M } \
    { display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M \
        "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } \
        "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } \
        '' \
        "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } \
        "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } \
        "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer "#{q:mouse_word}" } \
        "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer "#{q:mouse_line}" } \
        '' \
        "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } \
        "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer "#{q:mouse_hyperlink}" } \
        '' \
        "Horizontal Split" h { split-window -h } \
        "Vertical Split" v { split-window -v } \
        '' \
        "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } \
        "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } \
        "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } \
        '' \
        Kill X { kill-pane } \
        Respawn R { respawn-pane -k } \
        "#{?pane_marked,Unmark,Mark}" m { select-pane -m } \
        "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z } \
    }
